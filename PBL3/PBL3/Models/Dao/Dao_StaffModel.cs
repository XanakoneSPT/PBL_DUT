using PBL3.Model.Bean;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

using Dapper;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace PBL3.Model.Dao
{
    public class Dao_StaffModel
    {
        private dbConnection dbConnection; // Declare an instance of dbConnection

        public Dao_StaffModel()
        {
            dbConnection = new dbConnection(); // Initialize dbConnection instance
        }

        public List<StaffModel> GetAllStaff()
        {
            List<StaffModel> staffList = new List<StaffModel>();

            try
            {
                dbConnection.OpenConnection();

                string query = "SELECT * FROM Staff";
                using (SqlCommand cmd = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            StaffModel staff = new StaffModel();
                            staff.UserID = (int)reader["UserID"];
                            staff.StaffID = reader["StaffID"].ToString();
                            staff.FirstName = reader["FirstName"].ToString();
                            staff.LastName = reader["LastName"].ToString();
                            staff.Gender = Convert.ToBoolean(reader["Gender"]);
                            staff.Age = Convert.ToInt32(reader["Age"]);
                            staff.DateOfBirth = Convert.ToDateTime(reader["DateOfBirth"]);
                            staff.Email = reader["Email"].ToString();
                            staff.PhoneNumber = reader["PhoneNumber"].ToString();
                            staff.Address = reader["Address"].ToString();
                            staff.Salary = Convert.ToDecimal(reader["Salary"]);
                            staff.Position = reader["Position"].ToString();
                            staff.StartWorkDate = Convert.ToDateTime(reader["StartWorkDate"]);

                            staffList.Add(staff);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }

            return staffList;
        }

        private string GenerateStaffID()
        {
            string lastUserID = ""; // Biến để lưu UserID cuối cùng trong cơ sở dữ liệu
            string newUserID = ""; // Biến để lưu UserID mới được tạo ra

            try
            {
                // Truy vấn SQL để lấy UserID cuối cùng trong cơ sở dữ liệu
                string query = "SELECT TOP 1 StaffID FROM Staff ORDER BY StaffID DESC";
                dbConnection.OpenConnection();
                using (SqlCommand command = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            lastUserID = reader.GetString(0);
                        }
                    }
                }

                // Tạo UserID mới
                if (!string.IsNullOrEmpty(lastUserID))
                {
                    int lastNumber = int.Parse(lastUserID.Substring(2));
                    int newNumber = lastNumber + 1;
                    newUserID = "S" + newNumber.ToString("D3"); // D2 để đảm bảo số có hai chữ số
                }
                else
                {
                    newUserID = "S001"; // Nếu không có UserID nào trong cơ sở dữ liệu, ta bắt đầu từ User01
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }

            return newUserID;
        }

        // Thêm nhân viên mới với tự động sinh StaffID
        public bool AddStaffWithAutoGeneratedID(StaffModel staff)
        {
            bool success = false;
            string staffID = GenerateStaffID(); // Tự động sinh StaffID
            string query = "INSERT INTO Staff (StaffID, FirstName, LastName, Gender, Age, DateOfBirth, Email, PhoneNumber, Address, Salary, Position, UserID, StartWorkDate) VALUES (@StaffID, @FirstName, @LastName, @Gender, @Age, @DateOfBirth, @Email, @PhoneNumber, @Address, @Salary, @Position, @UserID, @StartWorkDate)";
            try
            {
                dbConnection.OpenConnection();
                using (SqlCommand cmd = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    cmd.Parameters.AddWithValue("@StaffID", staffID);
                    cmd.Parameters.AddWithValue("@FirstName", staff.FirstName);
                    cmd.Parameters.AddWithValue("@LastName", staff.LastName);
                    cmd.Parameters.AddWithValue("@Gender", staff.Gender);
                    cmd.Parameters.AddWithValue("@Age", staff.Age);
                    cmd.Parameters.AddWithValue("@DateOfBirth", staff.DateOfBirth);
                    cmd.Parameters.AddWithValue("@Email", staff.Email);
                    cmd.Parameters.AddWithValue("@PhoneNumber", staff.PhoneNumber);
                    cmd.Parameters.AddWithValue("@Address", staff.Address);
                    cmd.Parameters.AddWithValue("@Salary", staff.Salary);
                    cmd.Parameters.AddWithValue("@Position", staff.Position);
                    cmd.Parameters.AddWithValue("@UserID", staff.UserID);
                    cmd.Parameters.AddWithValue("@StartWorkDate", staff.StartWorkDate);

                    int rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected > 0)
                    {
                        success = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }
            return success;
        }

        // Cập nhật thông tin nhân viên
        public bool UpdateStaff(StaffModel staff)
        {
            bool success = false;
            string query = "UPDATE Staff SET FirstName = @FirstName, LastName = @LastName, Gender = @Gender, Age = @Age, DateOfBirth = @DateOfBirth, Email = @Email, PhoneNumber = @PhoneNumber, Address = @Address, Salary = @Salary, Position = @Position, StartWorkDate = @StartWorkDate, UserID = @UserID WHERE StaffID = @StaffID";
            try
            {
                dbConnection.OpenConnection();
                using (SqlCommand cmd = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    cmd.Parameters.AddWithValue("@FirstName", staff.FirstName);
                    cmd.Parameters.AddWithValue("@LastName", staff.LastName);
                    cmd.Parameters.AddWithValue("@Gender", staff.Gender);
                    cmd.Parameters.AddWithValue("@Age", staff.Age);
                    cmd.Parameters.AddWithValue("@DateOfBirth", staff.DateOfBirth);
                    cmd.Parameters.AddWithValue("@Email", staff.Email);
                    cmd.Parameters.AddWithValue("@PhoneNumber", staff.PhoneNumber);
                    cmd.Parameters.AddWithValue("@Address", staff.Address);
                    cmd.Parameters.AddWithValue("@Salary", staff.Salary);
                    cmd.Parameters.AddWithValue("@Position", staff.Position);
                    cmd.Parameters.AddWithValue("@UserID", staff.UserID);
                    cmd.Parameters.AddWithValue("@StaffID", staff.StaffID);
                    cmd.Parameters.AddWithValue("@StartWorkDate", staff.StartWorkDate);

                    int rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected > 0)
                    {
                        success = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }
            return success;

        }

        // Xóa nhân viên
        public bool DeleteStaff(string staffID)
        {
            bool success = false;
            string query = "DELETE FROM Staff WHERE StaffID = @StaffID";
            try
            {
                dbConnection.OpenConnection();
                using (SqlCommand cmd = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    cmd.Parameters.AddWithValue("@StaffID", staffID);

                    int rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected > 0)
                    {
                        success = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }
            return success;
        }
        public bool DeleteStaffByUserID(int _userID)
        {
            bool success = false;
            string query = "DELETE FROM Staff WHERE UserID = @UserID";
            try
            {
                dbConnection.OpenConnection();
                using (SqlCommand cmd = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    cmd.Parameters.AddWithValue("@UserID", _userID);

                    int rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected > 0)
                    {
                        success = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }
            return success;
        }
        // Tìm kiếm nhân viên
        public List<StaffModel> SearchStaff(string searchBy, string searchValue)
        {
            List<StaffModel> staffList = new List<StaffModel>();
            string query = "";
            try
            {
                dbConnection.OpenConnection();

                switch (searchBy.ToLower())
                {
                    case "staffid":
                        query = "SELECT * FROM Staff WHERE StaffID = @Value";
                        break;
                    case "firstname":
                        query = "SELECT * FROM Staff WHERE FirstName = @Value";
                        break;
                    case "lastname":
                        query = "SELECT * FROM Staff WHERE LastName = @Value";
                        break;
                    case "position":
                        query = "SELECT * FROM Staff WHERE Position = @Value";
                        break;
                    default:
                        Console.WriteLine("Invalid search criteria.");
                        return staffList;
                }

                using (SqlCommand cmd = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    cmd.Parameters.AddWithValue("@Value", searchValue);

                    SqlDataReader reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {
                        StaffModel staff = new StaffModel();
                        staff.StaffID = reader["StaffID"].ToString();
                        staff.FirstName = reader["FirstName"].ToString();
                        staff.LastName = reader["LastName"].ToString();
                        staff.Gender = (bool)reader["Gender"];
                        staff.Age = (int)reader["Age"];
                        staff.DateOfBirth = (DateTime)reader["DateOfBirth"];
                        staff.Email = reader["Email"].ToString();
                        staff.PhoneNumber = reader["PhoneNumber"].ToString();
                        staff.Address = reader["Address"].ToString();
                        staff.Salary = (decimal)reader["Salary"];
                        staff.Position = reader["Position"].ToString();
                        staff.UserID = (int)reader["UserID"];
                        staff.StartWorkDate = (DateTime)reader["StartWorkDate"];

                        staffList.Add(staff);
                    }

                    reader.Close();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }

            return staffList;
        }
        public int GetTotalStaffCount()
        {
            int totalCount = 0;

            try
            {
                dbConnection.OpenConnection();
                SqlConnection connection = dbConnection.GetConnection();

                // Query to get the total count of staff members
                totalCount = connection.ExecuteScalar<int>("SELECT COUNT(*) FROM Staff");

                dbConnection.CloseConnection();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }

            return totalCount;
        }
        // Get count of children for each month
        public Dictionary<string, int> GetStaffCountByMonth()
        {
            Dictionary<string, int> staffCountByMonth = new Dictionary<string, int>();

            string query = "SELECT FORMAT(StartWorkdate, 'MM-yyyy') AS MonthYear, COUNT(*) AS Count " +
                           "FROM Staff " +
                           "GROUP BY FORMAT(StartWorkDate, 'MM-yyyy')";

            try
            {
                dbConnection.OpenConnection();
                using (SqlCommand command = new SqlCommand(query, dbConnection.GetConnection()))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string monthYear = reader["MonthYear"].ToString();
                            int count = Convert.ToInt32(reader["Count"]);
                            staffCountByMonth.Add(monthYear, count);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                dbConnection.CloseConnection();
            }

            return staffCountByMonth;
        }
    }
}
